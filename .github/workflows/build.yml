---
name: ffmpeg

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/build.yml
  schedule:
    - cron: 0 23 * * *

permissions: write-all
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: check if we need to trigger a build
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(curl https://johnvansickle.com/ffmpeg/git-readme.txt | grep "version:" | awk '{print $2}')
          VERSION=${VERSION:0:7}
          echo "version=$VERSION" >> "$GITHUB_ENV"
          TODAY=$(date +'%Y-%m-%d')
          echo "date=$TODAY" >> "$GITHUB_ENV"
          if ! wget --spider "https://github.com/${{github.repository}}/releases/download/$VERSION/ffmpeg" > /dev/null 2>&1; then
          echo "trigger=true" >> "$GITHUB_ENV"
          echo "Build $VERSION"
          else
          echo "trigger=false" >> "$GITHUB_ENV"
          echo "Skip $VERSION"
          fi
          if [ -z $VERSION ]; then
          echo "trigger=false" >> "$GITHUB_ENV"
          echo "No version found"
          fi

      - name: checkout
        if: env.trigger == 'true'
        uses: actions/checkout@main

      - name: build
        if: env.trigger == 'true'
        env:
          VERSION: ${{ env.version }}
        run: |
          mkdir tmp
          curl -sSLf -o tmp/ffmpeg.tar.xz "https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz"
          tar -xvf tmp/ffmpeg.tar.xz -C tmp --strip-components=1
          mv tmp/ffmpeg .
          mv tmp/ffprobe .
          mv tmp/ffmpeg.tar.xz .

      - name: release
        if: env.trigger == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.version }}
          TODAY: ${{ env.date }}
        run: |
          gh release create "${VERSION}" --notes "Version: ${VERSION}" --title "${TODAY}" --repo "${{github.repository}}" || true
          gh release upload "${VERSION}" "ffmpeg" --clobber --repo "${{github.repository}}"
          gh release upload "${VERSION}" "ffprobe" --clobber --repo "${{github.repository}}"
          gh release upload "${VERSION}" "ffmpeg.tar.xz" --clobber --repo "${{github.repository}}"

          gh release create "master"  --notes "Version: ${VERSION}" --title "${TODAY}" --repo "${{github.repository}}" || true
          gh release edit "master"  --notes "Version: ${VERSION}" --title "${TODAY}" --repo "${{github.repository}}" || true
          gh release upload "master" "ffmpeg" --clobber --repo "${{github.repository}}"
          gh release upload "master" "ffprobe" --clobber --repo "${{github.repository}}"
          gh release upload "master" "ffmpeg.tar.xz" --clobber --repo "${{github.repository}}"


      - name: Set up QEMU
        if: env.trigger == 'true'
        uses: docker/setup-qemu-action@master

      - name: Set up Docker Buildx
        if: env.trigger == 'true'
        uses: docker/setup-buildx-action@master

      - name: Login to GHCR
        uses: docker/login-action@master
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Build
        if: env.trigger == 'true'
        uses: docker/build-push-action@master
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.version }}
            ghcr.io/${{ github.repository }}:${{ env.date }}

  # https://github.com/liskin/gh-workflow-keepalive
  keepalive:
    if: github.event_name == 'schedule'
    name: Keepalive
    runs-on: ubuntu-latest
    permissions:
      actions: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Re-enable workflow
        run: |
          case "${GITHUB_WORKFLOW_REF:?}" in
          "${GITHUB_REPOSITORY:?}"/.github/workflows/*.y*ml@*) ;;
          *) false ;;
          esac
          workflow="${GITHUB_WORKFLOW_REF%%@*}"
          workflow="${workflow#${GITHUB_REPOSITORY}/.github/workflows/}"
          echo "Re-enable $workflow"
          gh api -X PUT "repos/${GITHUB_REPOSITORY}/actions/workflows/${workflow}/enable"
